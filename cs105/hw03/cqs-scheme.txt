Reading Comprehension for Scheme
================================

###  Instructions ###

Edit this file, `cqs-scheme.txt`, to answer the questions below. There are
markers indicating where you should write your answers for each question.
Once you've edited the file, submit it by following the steps outlined on the
homework spec.

###  Questions  ###

For question 1, read the back half of section 2.1 ("An informal alternative")
and section 2.2 in *Seven Lessons in Program Design* on the course website. When
this reading mentions a "list of A's", the "A" can be interpreted as any kind of
data, e.g., a list of numbers, a list of booleans, etc.

 1. You are tasked with writing a function that consumes a list of
    numbers:
    
    (a) How many cases must you consider?

    > 2 Cases: empty list and non-empty list

    (b) To tell the cases apart, what condition or conditions will you
        use in `if` expressions?  (List one fewer condition than cases.)

    > if (null? list)

    You are tasked with writing a function that consumes an ordinary
    S-expression and considers three cases: the ordinary S-expression is either
    the empty list, a non-empty list, or an atom that is not the empty list.
    
    (c) To tell the cases apart, what condition or conditions will you
        use in `if` expressions?  (List one fewer condition than cases.)

    > (if (atom? value) ... 
        (if (null? value) ... ...))

For questions 2--3, please read section 2.2 on values, S-expressions, and
primitives in *Programming Languages: Build, Prove, and Compare*.

 2. What is the value of each of the expressions below?
    If a run-time error would occur, please say so.

        (car '(a b 1 2))  == ...
        (cdr '(a b 1 2))  == ...
        (= 'a 'b)         == ...

    Write your answers as S-expression literals, like `'(a b c)`,
    `#t`, or `17`.

    > (car '(a b 1 2))  == a
    > (cdr '(a b 1 2))  == (b 1 2)
    > (= 'a 'b)         == #f

 3. Which of the following expressions will produce this output (with each
    number on its own line):
 
    4
    5
    20

    (a) (begin (print 4) (print 5) (print (* 4 5)));

    (b) (begin (print 4) (print 5) (* 4 5));

    (c) (begin (println 4) (println 5) (println (* 4 5)));

    (d) (begin (println 4) (println 5) (* 4 5));

    > (d)


For question 4, please read the first couple pages of section 2.3 (through the
end of section 2.3.1), section 2.3.6, and the summaries of `=`, `equals?`,
`reverse`, and `append` in Table 2.3 on page 97 of *Programming Languages:
Build, Prove, and Compare*.

 4. Given the algebraic laws for reverse
 
    (reverse '()) == '()
    (reverse (cons x xs)) == (append (reverse xs) (list1 x)) 
    
    and the definitions of `=` and `equal?`, which of the following expressions
    evaluates to `#t` for every *list of ordinary S-expressions* `xs`?

        (=      (reverse (reverse xs)) xs)
        (equal? (reverse (reverse xs)) xs)

    (a) Only the first
    (b) Only the second
    (c) Both the first and the second
    (d) None

    > (b)

 5. Read the introduction to algebraic laws in the first page of
    section 2.5, which starts on page 110.
    Now say under what circumstances the law `(car (cons x xs)) = x`
    would be considered *valid*:

    (a) If there is any way to substitute *values* for `x` and `xs` 
        such that the two sides are equal.
    (b) If there is any way to substitute *expressions* for `x` and `xs` 
        such that the two sides are equal.
    (c) If no matter what *value* is substituted for `x` and what
        value is substituted for `xs`, the two sides are equal.
    (d) If no matter what *expression* is substituted for `x` and what
        list of expressions is substituted for `xs`, the two sides are equal.

    > (c)
    
 6. Algebraic laws are used to express *properties*, not just for
    program design. Read section 2.3 (another part of the second
    lesson) in *Seven Lessons in Program Design*. If you're interested in
    learning more about laws as properties, also read the first part of section 
    2.5, up to and including section 2.5.5 (this is not necessary to answer this
    question or complete the homework).

    Now complete the following laws, each of which should represent a valid
    property. The first can be completed by appealing to the append-empty law in
    the middle of page 99 of the main textbook; for the second, rely on the
    fact that the same condition is used in both if expressions.
    
        (append xs (append '() ys)) = ...
        
        (if p (if p x y) z)         = ...

        > (append xs (append '() ys)) = (append xs ys)
        > (if p (if p x y) z)         = (if p x z)

 7. In *Programming Languages: Build, Prove, and Compare*, read the two laws for
    `length` (which we will call "length-empty" and "length-cons") on page 98,
    the two laws for `append` on page 99, and sections 2.5.6 and 2.5.7. Then
    answer these questions about the proof starting at the bottom of page 115,
    which proves:   

        `(length (append xs ys))` equals `(+ (length xs) (length  ys))`

    How many laws are used in this proof in the base case? What are their names?
    
    > 2; append-empty and length-empty
    
    How many laws are used in the inductive case? What are their names?
    
    > 2; append-cons and length-cons
    
    
 8. Read the beginning of section 2.6 from pages 117 to the bottom of 118 (stop
    after reading code chunk 118c on page 118), which explains `let` and `let*`.
    Also read the last paragraph of secion 2.6 on page 120, which explains
    `letrec`.  Now answer the questions below:

    (a) What does the `let` expression in the following program evaluate to?

            (val x 3)  (let ([x 4] [y x]) y)

        Your answer: 3

    (b) What does the `let*` expression in the following program evaluate to?

            (val x 3)  (let* ([x 4] [y x]) y)

        Your answer: 4

    (c) What does the `let` expression in the following program evaluate to?

            (val x 3)  (val y 4)  (let ([x y] [y x]) y)

        Your answer: 3


