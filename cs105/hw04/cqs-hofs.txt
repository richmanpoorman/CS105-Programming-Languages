Reading Comprehension for Higher-Order Functions
================================================

###  Instructions ###

Edit this file, `cqs-hofs.txt`, to answer the questions below. There are
markers indicating where you should write your answers for each question.
Once you've edited the file, submit it by following the steps outlined on the
homework spec.

###  Questions  ###

The first step in this assignment is to learn the standard higher-order
functions on lists, which you will use a lot.  Suppose you need a list, or a
Boolean, or a function---what can you call? Read sections 2.7.2, 2.8.1, and
2.8.2 to learn about these functions (you can also read 2.8.3 to see their laws
and implementations), then answer questions 1-5. 

 1. Consider each of the following functions:

          map  filter  exists?  all?  curry  uncurry  foldl  foldr

    Each of these functions can be classified based on what kind of data they
    return; here are the four categories:

    **(B)** Always returns a Boolean  
    **(F)** Always returns a function  
    **(L)** Always returns a list  
    **(A)** Can return anything (including a Boolean, a function, or a list)

    After each function, write exactly one of (B), (F), (L), or (A) to indicate
    what kind of value they return:

         map     (L)

         filter  (L)

         exists? (B)

         all?    (B)

         curry   (F)

         uncurry (F)

         foldl   (A)

         foldr   (A)



 2. Here are the same functions again:

          map  filter  exists?  all?  curry  uncurry  foldl  foldr

    For each function, say which of the following five categories best
    describes it.  Pick the most specific category (e.g., (S) is more
    specific than (L) or (M), and all of these are more specific than (?)).

    **(S)** Takes a list & a function; returns a list of *exactly* the same size  
    **(L)** Takes a list & a function; returns a list of *at least* the same size  
    **(M)** Takes a list & a function; returns a list of *at most* the same size  
    **(?)** Might return a list  
    **(V)** Never returns a list

    After each function, write (S), (L), (M), (?), or (V):

         map      (S)

         filter   (M)

         exists?  (V)

         all?     (V)

         curry    (V)

         uncurry  (V)

         foldl    (?)

         foldr    (?)



 3. Here are the same functions again:

          map  filter  exists?  all?  curry  uncurry  foldl  foldr

    Put each function into exactly one of the following categories. Always pick
    the most specific category (e.g. (F2) is more specific than (F)).

    **(F)** Takes a single argument: a function  
    **(F2)** Takes a single argument: a function *that itself takes two arguments*  
    **(+)** Takes more than one argument

    After each function, write (F), (F2), or (+):

         map      (+)

         filter   (+)

         exists?  (+)

         all?     (+)

         curry    (F2)

         uncurry  (F)

         foldl    (+)

         foldr    (+)






 4. Let's dive deeper into folding, specifically, the difference between
    `foldr` and `foldl`.

    (a) Do you expect `(foldl + 0 '(1 2 3))` and `(foldr + 0 '(1 2 3))` 
        to be the same or different?

    > I expect that the results would be the same, as the operation 
    > that is being used to fold (+) is an associative operation, 
    > so the order in which values are done does not matter

    (b) Do you expect `(foldl cons '() '(1 2 3))` and 
        `(foldr cons '() '(1 2 3))` to be the same or different?

    > Yes, I expect that the folds are different, as the order in which 
    > you cons to a list will change what the list is (aka cons is not
    > associative); foldl will give you '(3 2 1) and foldr will give '(1 2 3)

    (c) Look at the initial basis, which is summarized on 97.
        Give one example of a function, other than `+` or `cons`, that
        can be passed as the first argument to `foldl` or `foldr`, such
        that `foldl` _always returns exactly the same result_ as `foldr`.
        Note that multiple functions in the initial basis meet this requirement.

    > * (multiplication) is an operation that would return the same using 
    > foldl or foldr, as just like +, it is an associative operation so will 
    > return the same value regardless of the order of the operations

    (d) Give one example of a function, other than `+` or `cons`, that can be
        passed as the first argument to `foldl` or `foldr`, such that
        `foldl` _may return a different result_ from `foldr`.
        Note that multiple functions in the initial basis meet this requirement.

    > - (subtraction), as subtraction is not associative (as 1 - 2 and 2 - 1
    > are not the same); for example (foldl - 0 '(1 2)) gives 1 and 
    > (foldr - 0 '(1 2)) gives -1


 5. This question concerns function composition and currying. You will
    judge the _proposed_ properties below, which propose equality of functions,
    according to these rules:

       - Assume that names `curry`, `o`, `<`, `*`, `cons`, `even?`,
         and `odd?` have the definitions you would expect, but that
         `m` may have any value.

       - Each property proposes to equate two functions.  If the functions
         are equal---which is to say, when both sides are applied to
         an argument, they always produce the same result---then mark
         the property **Good**.  But if there is any argument on which the
         left-hand side produces *different* results from the right,
         mark the property **Bad**.
     
     Mark each property **Good** or **Bad**:

        ((curry <) m)     == (lambda (n) (< m n))       > Good
            
        ((curry <) m)     == (lambda (n) (< n m))       > Bad

        ((curry cons) 10) == (lambda (xs) (cons 10 xs)) > Good

        (o odd?  (lambda (n) (* 3 n))) == odd?          > Good 

        (o even? (lambda (n) (* 4 n))) == even?         > Bad 

For question 6, read the beginning of section 2.4, up through section 2.4.1. If
you're interested in seeing more examples, you can also read section 2.4.2 (but
it's not necessary).

 6. Imagine that $\mu$Scheme is given the following definition:

        (record 3point [x y z])


    This definition puts five functions into the environment ρ.

    (a) What are their names?

        > make-3point 
        > 3point? 
        > 3point-x 
        > 3point-y 
        > 3point-z
      
    (b) Which one is the _type predicate_?

        > 3point? 
    
    (c) Which one is the _constructor_?
    
        > make-3point



For question 7, read section 3 in *Seven Lessons in Program Design* on the
course website. 

 7. The lesson mentions a higher-order function `flip`, which can convert `<`
    into `>`, among other tricks.  Write as many algebraic laws as are needed to
    specify `flip`:

    > ((flip f) x y) == (f y x)
    
