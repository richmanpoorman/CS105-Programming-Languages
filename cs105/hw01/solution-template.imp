;;;;;;;;;;;;;;;;;;; CS 105 IMPCORE ASSIGNMENT ;;;;;;;;;;;;;;;

;; Your Name: 


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 1


;; (double-digit n) returns a nonnegative integer whose decimal representation 
;; is the same as the decimal representation of integer n, except each digit 
;; appears twice. n must be positive and less than 20,000.

;; laws:
;;   (double-digit d) == (+ (* 10 d) d)
;;   (double-digit (+ (* 10 m) d)) == (+ 
;;                                      (+ (* 10 d) d) 
;;                                      (* 100 (double-digit m))
;;                                    )

;; TODO
(define double-digit (n)
    (/ 1 0)) ;; replace this line with a good implementation

        ;; replace next line with good check-expect or check-assert tests
        (check-error (double-digit 9))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 2


;; (population-count n) returns the number of 1 bits in the binary
;; representation of integer n.

;; laws:
;;   (population-count ...) == ...
;;   ...

(define population-count (n)
    (/ 1 0)) ;; replace this line with a good implementation

        ;; replace next line with good check-expect or check-assert tests
        (check-error (population-count 9))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 3


;; (binary n) returns the binary representation of integer n.

;; laws:
;;   (binary ...) == ...
;;   ...

(define binary (n)
    (/ 1 0)) ;; replace this line with a good implementation

        ;; replace next line with good check-expect or check-assert tests
        (check-error (binary 9))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 4


;; (sigma m n) returns the sum of the integers from m to n,
;; where m is an integer and n is an integer greater than or
;; equal to m. 

;; laws:
;;   (sigma ...) == ...
;;   ...

(define sigma (m n)
    (/ 1 0)) ;; replace this line with a good implementation

        ;; replace next line with good check-expect or check-assert tests
        (check-error (sigma 9 9))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 5


;; (prime? n) returns 1 if n is prime and 0 otherwise, where n is a
;; nonnegative integer.

;; laws:
;;   (prime? ...) == ...
;;   ...

(define prime? (n)
    (/ 1 0)) ;; replace this line with a good implementation

        ;; replace next line with good check-expect or check-assert tests
        (check-error (prime? 9))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 6


;; (nthprime n) <does what exactly> (replace with function contract)

;; laws:
;;   (nthprime ...) == ...
;;   ...
;; [optional notes about where laws come from, or difficulty, if any]

(define nthprime (n)
    (/ 1 0)) ;; replace this line with a good implementation

        ;; replace next line with good check-expect or check-assert tests
        (check-error (nthprime 9))
