;;;;;;;;;;;;;;;;;;; CS 105 IMPCORE ASSIGNMENT ;;;;;;;;;;;;;;;

;; Your Name: Matthew Wong


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 1


;; (double-digit n) returns a nonnegative integer whose decimal representation 
;; is the same as the decimal representation of integer n, except each digit 
;; appears twice. n must be positive and less than 20,000.

;; laws:
;;   (double-digit d) == (+ (* 10 d) d)
;;   (double-digit (+ (* 10 m) d)) == (+ 
;;                                      (+ (* 10 d) d) 
;;                                      (* 100 (double-digit m)))

(define double-digit (n)
    (if (< n 10)
        (+ (* 10 n) n)
        (+ (+ (* 10 (mod n 10)) (mod n 10))
            (* 100 (double-digit (/ n 10))))))

        ;; replace next line with good check-expect or check-assert tests
        (check-expect (double-digit 9) 99)
        (check-expect (double-digit 123) 112233)
        (check-expect (double-digit 0) 0)
        (check-expect (double-digit 19999) 1199999999)
        (check-expect (double-digit 10) 1100)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 2


;; (population-count n) returns the number of 1 bits in the binary
;; representation of integer n.

;; laws:
;;   (population-count 0) == 0
;;   (population-count (+ (* 2 m) b)) == (+ (if (= 0 b) 0 1) 
;;                                          (population-count m))

(define population-count (n)
    (if (= n 0) 
        0 
        (+ (if (= 0 (mod n 2)) 0 1) (population-count (/ n 2))))) 

        (check-expect (population-count 0) 0)
        (check-expect (population-count 9) 2)
        (check-expect (population-count 2147483647) 31)
        (check-expect (population-count 1) 1)
        (check-expect (population-count 735472) 10)
        (check-expect (population-count 45967) 10)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 3


;; (binary n) returns the binary representation of integer n.

;; laws:
;;   (binary 0) == 0
;;   (binary (+ (* 2 m) b)) == (+ b (* 10 (binary m))), where (+ (* 2 m) b) > 0
;;   (binary (+ (* 2 m) b)) == (negated (binary (+ (* -2 m) b))), where 
;;      (+ (* 2 m) b) < 0

(define binary (n)
    (if (= n 0)
        0
        (if (> n 0)
            (+ (mod n 2) (* 10 (binary (/ n 2))))
            (negated (binary (negated n))))))

        ;; replace next line with good check-expect or check-assert tests
        (check-expect (binary 9) 1001)
        (check-expect (binary 0) 0)
        (check-expect (binary -5) -101)
        (check-expect (binary 15) 1111)
        (check-expect (binary -16) -10000)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 4


;; (sigma m n) returns the sum of the integers from m to n,
;; where m is an integer and n is an integer greater than or
;; equal to m. 

;; laws:
;;   (sigma m m) == m
;;   (sigma m n) == (+ n (sigma m (- n 1))), where n > m

(define sigma (m n)
    (if (= m n)
        m 
        (+ n (sigma m (- n 1)))))

        ;; replace next line with good check-expect or check-assert tests
        (check-expect (sigma 0 0) 0)
        (check-expect (sigma 0 10) 55)
        (check-expect (sigma -10 10) 0)
        (check-expect (sigma -10 0) -55)
        (check-expect (sigma -10 -10) -10)




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 5

;; (no-factor-of? m n) returns 0 if any value from [m, n - 1] is a factor of n,
;; and 1 if m is equal to n or there are no factors in the range [m, n - 1], 
;; where both m and n are natural numbers greater or equal to 2 with n 
;; being greater or equal to m (aka m <= n)

;; laws:
;;  (no-factor-of? n n) == 1
;;  (no-factor-of? m n) == 0, where n % m = 0
;;  (no-factor-of? m n) == (no-factor-of? (+ m 1) n)), and n % m != 0
(define no-factor-of? (m n)
    (if (= n m)
        1
        (if (= (mod n m) 0)
            0
            (no-factor-of? (+ m 1) n))))

        (check-assert (no-factor-of? 10 10))
        (check-assert (no-factor-of? 7 7))
        (check-assert (no-factor-of? 2 3))
        (check-assert (not (no-factor-of? 2 4)))
        (check-assert (not (no-factor-of? 2 4199)))
        (check-assert (no-factor-of? 4 17))
        (check-assert (not (no-factor-of? 2 221)))


;; (prime? n) returns 1 if n is prime and 0 otherwise, where n is a
;; nonnegative integer.

;; laws:
;;   (prime? n) == 0, where n < 2
;;   (prime? n) == 1, where n = 2
;;   (prime? n) == (no-factor-of? 2 n), where n > 2

(define prime? (n)
    (if (< n 2)
        0
        (if (> n 2)
            (no-factor-of? 2 n)
            1 )))

        ;; replace next line with good check-expect or check-assert tests
        (check-assert (not (prime? 0)))
        (check-assert (prime? 2))
        (check-assert (prime? 3))
        (check-assert (not (prime? 221)))
        (check-assert (prime? 997))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 6

;; (nth-prime-after n m) Returns the nth prime greater than the postive integer
;; m, where n is a positive natural number; if n = 1 then the function will 
;; return the next prime number greater or equal to m

;; laws:
;;  (nth-prime-after 1 m) == m, where m is prime
;;  (nth-prime-after n m) == (nth-prime-after (- n 1) (+ m 1)), where 
;;      m is prime and n > 1 (aka n >= 2)
;;  (nth-prime-after n m) == (nth-prime-after n (+ m 1)), where m is not prime


(define nth-prime-after (n m)
    (if (prime? m) 
        (if (= n 1)
            m 
            (nth-prime-after (- n 1) (+ m 1)))
        (nth-prime-after n (+ m 1))))

        (check-expect (nth-prime-after 1 2) 2)
        (check-expect (nth-prime-after 2 19) 23)
        (check-expect (nth-prime-after 1 4) 5)
        (check-expect (nth-prime-after 1 1) 2)
        (check-expect (nth-prime-after 100 3) 547)

;; (nthprime n) Returns the nth prime number in the sequence of prime numbers, 
;; given that n is a positive  integer (aka n > 0) and 
;; where 2 is the first (1st) prime number

;; laws:
;;   (nthprime n) == (nth-prime-after n 1)
;; Note that there is only one law needed, as the function will
;; find the required prime number after the first value of '1'
(define nthprime (n)
    (nth-prime-after n 1)) 

        (check-expect (nthprime 1) 2)
        (check-expect (nthprime 2) 3)
        (check-expect (nthprime 100) 541)
