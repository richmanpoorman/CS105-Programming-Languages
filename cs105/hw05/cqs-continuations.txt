Reading Comprehension for Continuations
================================================

###  Instructions ###

Edit this file, `cqs-continuations.txt`, to answer the questions below. There
are markers indicating where you should write your answers for each question.
Once you've edited the file, submit it by following the steps outlined on the
homework spec.

###  Questions  ###

For question 1, read section 2.11.4 (starting on page 151) and also read about
the semantics of lambda on page 147. When reading about the ApplyClosure rule
(which is quite large), just consider the case where `n` is 0, i.e., there are
no arguments being passed to the closure and the closure captures a lambda with
zero parameters. 

 1. Use the semantics of `val` and `lambda` to answer two
    questions about the following sequence of definitions:

        (val f (lambda () y))
        (val y 10)
        (f)

    We know that evaluating `lambda` in an environment ρ creates a
    closure using that same ρ. if the definitions above are evaluated
    in an environment in which `y` ∈ dom ρ, then what is the result of
    the call to `f`? Pick A, B, or C.

      (A) It returns `10`.
      (B) An error is raised: `Run-time error: name y not found`.
      (C) It returns whatever value `y` had before the definitions
          were evaluated.

    > ... your answer here ...
    > (A)

    If the definitions above are evaluated in an environment in which
    `y` ∉ dom ρ, what is the result of the call to `f`? 
    Pick either A or B.

      (A) It returns `10`.
      (B) An error is raised: `Run-time error: name y not found`.

    > ... your answer here ...
    > (B)

    You can check your work by passing the above definitions into the uscheme
    interpreter (along with a prior definition in the case that `y` ∈ dom ρ).
    Ensure that you understand why the interpreter responds as it does, as that
    will help you on the homework's theory problem.

    *You are ready to start homework problem 1.*

For question 2, revisit the definition of values in figure 2.1 on page 91.
Next, study the definition of the predefined function `all?` in section 2.8.3,
at the bottom of page 130.

 2. Like many higher-order functions, `all?` has a subtle contract: it is
    permissible to call `(all? p? xs)` if and only if there exists a set $A$
    such that following are true:
    
      - Parameter `p?` is a function that accepts one argument, which
        must be a member of $A$.  Then `p?` returns a Boolean.
        
      - Parameter `xs` is in *LIST(A)*.  That is, `xs` is a list of
        values, and every element of `xs` is a member of $A$.
        
    In other words, `xs` must be a list of values, each of which may
    be passed to `p?`.
    
    With this contract in mind, answer these questions:
    
    (a) Write a value that is never permissible as the second,
        `xs` argument to `all?`, no matter what `p?` is:

        > ... your answer here ...
        > Any symbols, such as 'not-a-list

    (b) Write a value *made with `cons`* that is never permissible as
        the second, `xs` argument to `all?`, no matter what `p?` is:

        > ... your answer here ...
        > (cons 1 2), as it is not a list but a pair

    (c) Write a value that may or may not be permissible as the
        second, `xs` argument to `all?`, depending on what `p?` is.
        Your value should be *permissible* if `p?` is `number?`, but
        *impermissible* if `p?` is `prime?` (`(prime? n)` returns 1 
        if non-negative integer `n` is prime and 0 otherwise):

        > ... your answer here ...
        > xs = '(-1) 

    (An impermissible call might or might not result in a checked
    run-time error.)

For question 3, read the description of function `list-of?` in problem **2** in
the homework, and also read the hints for that problem. 

 3. Suppose you are given a predicate `even?` whose contract says it accepts a
    number and returns a Boolean saying if the number is even.  The following
    call to `list-of?` is a contract violation:

        (list-of? even? '(1 2 3 oopsie))
        
    Explain how `list-of?`'s contract is violated, and assign blame to
    one of the two arguments: the first or the second:
    
    > ... your answer here ...
    > even? (1st argument) violates the contract, as even? is supposed to be 
    > a function that can take ANY input, but even? only accepts numbers

    Now, assume that you are given a predicate `prime-number?`, which
    accepts *any* value and returns a Boolean saying whether the value
    is both a number and prime.  For each value of `xs` that you
    listed in question 2, answer whether passing the value to
    `list-of?`, along with the predicate `prime-number?`, violates
    `list-of?`'s contract---and if not, what result `list-of?` should
    return.
    
    (a) Does the value you wrote in 2(a) violate the contract?

        > ... yes or no ...
        > No, it doesn't violate the contract as v can be any value
        
        If not, what does `(list-of? prime-number? xs)` return?

        > ... possible result ...
        > #f, as v is not a list

    (b) Does the value you wrote in 2(b) violate the contract?

        > ... yes or no ...
        > No, it doesn't violate the contract as v can be any value
        
        If not, what does `(list-of? prime-number? xs)` return?

        > ... possible result ...
        > #f, as v is not a list
        
    (c) Does the value you wrote in 2(c) violate the contract?

        > ... yes or no ...
        > No,, it doesn't violate hte contract as v can be any value
        
        If not, what does `(list-of? prime-number? xs)` return?

        > ... possible result ...
        > #f, as not all of the values of v are prime

    *You are ready to start homework problem 2.*

For question 4, read the description of Boolean formulas in the instructions for
problem **3** in the homework.  Then, if you need a refresher on uscheme
records, revisit the description of them in the recitation on higher-order
functions. 

 4. Assume you are given a Boolean formula f₀, and answer these questions:
    
    (a) How, in constant time, do you tell if f₀ has the form `(make-not f)`?

        > (not? f₀)
        
    (b) How, in constant time, do you tell if f₀ has the form `(make-and fs)`?

        > (and? fs)

    (c) How, in constant time, do you tell if f₀ has the form `(make-or fs)`?

        > (or? fs)

    *You are ready to start homework problem 3.*

For questions 5 and 6, read about association lists in section 2.3.8, which
starts on page 105. Then read the full description for problem **4** in the
homework, including the inductive definition of evaluation and the definition of
the environment used by `eval-formula`.

 5. Given the definition

        (val mascots
          '((Tufts Jumbo) (MIT Beaver) (Northeastern Husky) (BU Terrier)))

    what is the value of each of these expressions?

        (find 'Tufts mascots) ==> 'Jumbo
        (find 'MIT mascots) ==> 'Beaver
        (find 'Harvard mascots) ==> '()
        (find 'MIT (bind 'MIT 'Engineer mascots)) ==> 'Engineer
      

 6. Each of the following Boolean formulas is evaluated in an
    environment where `x` is `#t`, `y` is `#f`, and `z` is `#f`.
    What is the result of evaluating each formula?
    (For each formula, answer `#t`, "true", `#f`, or "false.")

    (a) $x$, which in μScheme is constructed by `'x`

        > #t 

    (b) $¬x$, which in μScheme is constructed by `(make-not 'x)`

        > #f 

    (c) $¬y ∧ x$, which in μScheme is constructed by
         `(make-and (list2 (make-not 'y) 'x))`

        > #t 

    (d) $¬x ∨ y ∨ z$, which in μScheme is constructed by
         `(make-or (list3 (make-not 'x) 'y 'z))`

        > #f 

    (e) Formula `(make-not (make-or (list1 'z)))`, which has a
        tricky `make-or` applied to a list of length 1, and so can't
        be written using infix notation
    
        > #t

    *You are ready to start homework problem 4.*


For question 7, read about the Boolean-satisfaction problem in the 2nd, 3rd, and
4th paragraphs of section 2.10.2 (starting with "One classic problem that can be
solved..." at the bottom of page 138, and ending with "...a search might take
exponential time." in the middle of page 139.). Note that the rules for
satisfaction, described just after the CNF grammar in the reading, are the same
for all Boolean formulas, even those that are not in CNF.
  
The above reading is all you need to answer this comprehension question, but
other readings can help reinforce some ideas you have to use on the homework and
provide hints for writing your SAT solver in problem 5.  The intro to section
2.10 and section 2.10.1 (pages 136-138) motivate and explain the general notion
of continuations, while the rest of section 2.10.2 (pages 139-143) build up a
solution for a backtracking, continuation-based SAT solver restricted to Boolean
formulas written in CNF form (which was partially covered in lecture).  The SAT
solver you will write for problem 5 will be more general, admitting any Boolean
formula. 

 7. For each of the following Boolean formulas, if there is an
    assignment to `x`, `y`, and `z` that satisfies the formula,
    write the words "is solved by" and a satisfying assignment.
    Incomplete assignments are OK.  If there is no satisfying
    assignment, write the words "has no solution."
    
    Examples:
    
    $x ∨ y ∨ z$, which in μScheme is constructed by `(make-or '(x y z))`,
    is solved by `'((x #t))`
    
    $x ∧ y ∧ z$, which in μScheme is constructed by `(make-and '(x y z))`,
    is solved by `'((x #t) (y #t) (z #t))`
    
    $x ∧ ¬x$, which in μScheme is constructed by
    `(make-and (list2 'x (make-not 'x)))`, has no solution

    For each of these formulas, replace the ellipsis with your answer:
    
    (a) $(x ∨ ¬x) ∧ y$, which in μScheme is constructed by  
        `(make-and (list2 (make-or (list2 'x (make-not 'x))) 'y))`,  

        > is solved by '((x #t) (y #t))

    
    (b) $(x ∨ ¬x) ∧ ¬x$, which in μScheme is constructed by  
        `(make-and (list2 (make-or (list2 'x (make-not 'x))) (make-not 'x)))`,  

        > is solved by '((x #f))

    (c) $(x ∨ y ∨ z) ∧ (¬x ∧ x) ∧ (x ∨ ¬y ∨ ¬z)$,
        which in μScheme is constructed by

            (make-and 
                (list3 (make-or (list3 'x 'y 'z)) 
                       (make-and (list2 (make-not 'x) 'x))
                       (make-or (list3 'x (make-not 'y) (make-not 'z))))))

        > has no solution


    *You are ready to start homework problem 5.*

